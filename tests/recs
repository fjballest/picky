#!/bin/pi
entry 3
types 8
0 bool b  0 1 2 4 0
1 char c  0 255 256 4 0
2 int i  -2147483646 2147483647 0 4 0
3 float r  0 0 0 4 0
4 $nil p  0 0 0 8 0
5 file f  0 0 0 4 0
6 Tpt R  0 0 2 8 0
x 2 0x0
y 2 0x4
7 $tstr1 s  0 0 1 4 1
vars 7
Eol 1 0x0 10 recs.p 4
Eof 1 0x4 255 recs.p 4
$s0 7 0x8 '[' recs.p 14
$s1 7 0xc ',' recs.p 16
$s2 7 0x10 ']' recs.p 18
stdin 5 0x14 - recs.p 4
stdout 5 0x18 - recs.p 4
procs 4
0 writept 0x000 1 0 0 8 0 recs.p 50
pt 6 0x0 - recs.p 17
1 incpt 0x03c 1 0 0 8 0 recs.p 46
pt 6 0x0 - recs.p 24
2 addpt 0x064 2 0 8 16 0 recs.p 49
p1 6 0x0 - recs.p 31
p2 6 0x8 - recs.p 30
3 main 0x090 0 2 0 0 16 recs.p 34
p1 6 0x0 - recs.p 50
p2 6 0x8 - recs.p 49
text 244
# {...}
# fwrite(stdout: file, $s0="[")
00000	daddr	0x00000008	# $s0="[";
00002	daddr	0x00000018	# stdout: file;
00004	ind	0x00000004
00006	push	0x00000007
00008	call	0x8000000e	# fwrite();
# fwrite(stdout: file, .($pt: Tpt, x: int))
0000a	arg	0x00000000	# .; $pt: Tpt;
0000c	fld	0x00000000
0000e	ind	0x00000004
00010	daddr	0x00000018	# stdout: file;
00012	ind	0x00000004
00014	push	0x00000002
00016	call	0x8000000e	# fwrite();
# fwrite(stdout: file, $s1=",")
00018	daddr	0x0000000c	# $s1=",";
0001a	daddr	0x00000018	# stdout: file;
0001c	ind	0x00000004
0001e	push	0x00000007
00020	call	0x8000000e	# fwrite();
# fwrite(stdout: file, .($pt: Tpt, y: int))
00022	arg	0x00000000	# .; $pt: Tpt;
00024	fld	0x00000004
00026	ind	0x00000004
00028	daddr	0x00000018	# stdout: file;
0002a	ind	0x00000004
0002c	push	0x00000002
0002e	call	0x8000000e	# fwrite();
# fwrite(stdout: file, $s2="]")
00030	daddr	0x00000010	# $s2="]";
00032	daddr	0x00000018	# stdout: file;
00034	ind	0x00000004
00036	push	0x00000007
00038	call	0x8000000e	# fwrite();
# return <nil>
0003a	ret	0x00000000
# {...}
# .(&pt: Tpt, x: int) = +(.(&pt: Tpt, x: int), 1)
0003c	push	0x00000001	# 1;
0003e	arg	0x00000000	# .; &pt: Tpt;
00040	ind	0x00000008
00042	fld	0x00000000
00044	ind	0x00000004
00046	add	
00047	arg	0x00000000	# .; &pt: Tpt;
00049	ind	0x00000008
0004b	fld	0x00000000
0004d	sto	0x00000002
# .(&pt: Tpt, y: int) = +(.(&pt: Tpt, y: int), 1)
0004f	push	0x00000001	# 1;
00051	arg	0x00000000	# .; &pt: Tpt;
00053	ind	0x00000008
00055	fld	0x00000004
00057	ind	0x00000004
00059	add	
0005a	arg	0x00000000	# .; &pt: Tpt;
0005c	ind	0x00000008
0005e	fld	0x00000004
00060	sto	0x00000002
# return <nil>
00062	ret	0x00000001
# {...}
# .($p1: Tpt, x: int) = +(.($p1: Tpt, x: int), .($p2: Tpt, x: int))
00064	arg	0x00000008	# .; $p2: Tpt;
00066	fld	0x00000000
00068	ind	0x00000004
0006a	arg	0x00000000	# .; $p1: Tpt;
0006c	fld	0x00000000
0006e	ind	0x00000004
00070	add	
00071	arg	0x00000000	# .; $p1: Tpt;
00073	fld	0x00000000
00075	sto	0x00000002
# .($p1: Tpt, y: int) = +(.($p1: Tpt, y: int), .($p2: Tpt, y: int))
00077	arg	0x00000008	# .; $p2: Tpt;
00079	fld	0x00000004
0007b	ind	0x00000004
0007d	arg	0x00000000	# .; $p1: Tpt;
0007f	fld	0x00000004
00081	ind	0x00000004
00083	add	
00084	arg	0x00000000	# .; $p1: Tpt;
00086	fld	0x00000004
00088	sto	0x00000002
# return $p1: Tpt
0008a	arg	0x00000000	# $p1: Tpt;
0008c	ind	0x00000008
0008e	ret	0x00000002
# {...}
# .(%p1: Tpt, x: int) = 3
00090	push	0x00000003	# 3;
00092	lvar	0x00000000	# .; %p1: Tpt;
00094	fld	0x00000000
00096	sto	0x00000002
# .(%p1: Tpt, y: int) = 3
00098	push	0x00000003	# 3;
0009a	lvar	0x00000000	# .; %p1: Tpt;
0009c	fld	0x00000004
0009e	sto	0x00000002
# .(%p2: Tpt, x: int) = 4
000a0	push	0x00000004	# 4;
000a2	lvar	0x00000008	# .; %p2: Tpt;
000a4	fld	0x00000000
000a6	sto	0x00000002
# .(%p2: Tpt, y: int) = 4
000a8	push	0x00000004	# 4;
000aa	lvar	0x00000008	# .; %p2: Tpt;
000ac	fld	0x00000004
000ae	sto	0x00000002
# writept(%p1: Tpt)
000b0	lvar	0x00000000	# %p1: Tpt;
000b2	ind	0x00000008
000b4	call	0x00000000	# writept();
# fwriteeol(stdout: file)
000b6	daddr	0x00000018	# stdout: file;
000b8	ind	0x00000004
000ba	call	0x80000010	# fwriteeol();
# writept(%p2: Tpt)
000bc	lvar	0x00000008	# %p2: Tpt;
000be	ind	0x00000008
000c0	call	0x00000000	# writept();
# fwriteeol(stdout: file)
000c2	daddr	0x00000018	# stdout: file;
000c4	ind	0x00000004
000c6	call	0x80000010	# fwriteeol();
# incpt(%p1: Tpt)
000c8	lvar	0x00000000	# %p1: Tpt;
000ca	call	0x00000001	# incpt();
# writept(%p1: Tpt)
000cc	lvar	0x00000000	# %p1: Tpt;
000ce	ind	0x00000008
000d0	call	0x00000000	# writept();
# fwriteeol(stdout: file)
000d2	daddr	0x00000018	# stdout: file;
000d4	ind	0x00000004
000d6	call	0x80000010	# fwriteeol();
# %p1: Tpt = addpt(%p1: Tpt, %p2: Tpt)
000d8	lvar	0x00000008	# %p2: Tpt;
000da	ind	0x00000008
000dc	lvar	0x00000000	# %p1: Tpt;
000de	ind	0x00000008
000e0	call	0x00000002	# addpt();
000e2	lvar	0x00000000	# %p1: Tpt;
000e4	sto	0x00000006
# writept(%p1: Tpt)
000e6	lvar	0x00000000	# %p1: Tpt;
000e8	ind	0x00000008
000ea	call	0x00000000	# writept();
# fwriteeol(stdout: file)
000ec	daddr	0x00000018	# stdout: file;
000ee	ind	0x00000004
000f0	call	0x80000010	# fwriteeol();
# return <nil>
000f2	ret	0x00000003
pcs 27
00000	recs.p	14
0000a	recs.p	15
00018	recs.p	16
00022	recs.p	17
00030	recs.p	18
0003a	recs.p	53
0003c	recs.p	23
0004f	recs.p	24
00062	recs.p	53
00064	recs.p	29
00077	recs.p	30
0008a	recs.p	31
00090	recs.p	38
00098	recs.p	39
000a0	recs.p	40
000a8	recs.p	41
000b0	recs.p	42
000b6	recs.p	43
000bc	recs.p	44
000c2	recs.p	45
000c8	recs.p	46
000cc	recs.p	47
000d2	recs.p	48
000d8	recs.p	49
000e6	recs.p	50
000ec	recs.p	51
000f2	recs.p	53
